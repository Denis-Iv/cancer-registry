// <auto-generated />
using System;
using CancerRegistry.Models.Diagnoses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CancerRegistry.Migrations.Diagnose
{
    [DbContext(typeof(DiagnoseContext))]
    partial class DiagnoseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.Diagnose", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("DistantMetastasis")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryTumor")
                        .HasColumnType("int");

                    b.Property<int>("RegionalLymphNodes")
                        .HasColumnType("int");

                    b.Property<short>("Stage")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.HealthChecks.HealthCheck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("DiagnoseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiagnoseId");

                    b.ToTable("HealthChecks");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.Treatments.Treatment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Beginning")
                        .HasColumnType("datetime2");

                    b.Property<int>("Chemeotherapy")
                        .HasColumnType("int");

                    b.Property<long>("DiagnoseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("Radiation")
                        .HasColumnType("int");

                    b.Property<int>("Surgery")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnoseId")
                        .IsUnique();

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.HealthChecks.HealthCheck", b =>
                {
                    b.HasOne("CancerRegistry.Models.Diagnoses.Diagnose", "Diagnose")
                        .WithMany("HealthChecks")
                        .HasForeignKey("DiagnoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnose");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.Treatments.Treatment", b =>
                {
                    b.HasOne("CancerRegistry.Models.Diagnoses.Diagnose", "Diagnose")
                        .WithOne("Treatment")
                        .HasForeignKey("CancerRegistry.Models.Diagnoses.Treatments.Treatment", "DiagnoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnose");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.Diagnose", b =>
                {
                    b.Navigation("HealthChecks");

                    b.Navigation("Treatment");
                });
#pragma warning restore 612, 618
        }
    }
}
