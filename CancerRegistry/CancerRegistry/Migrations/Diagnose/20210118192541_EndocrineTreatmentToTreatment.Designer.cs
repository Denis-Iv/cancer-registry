// <auto-generated />
using System;
using CancerRegistry.Models.Diagnoses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CancerRegistry.Migrations.Diagnose
{
    [DbContext(typeof(DiagnoseContext))]
    [Migration("20210118192541_EndocrineTreatmentToTreatment")]
    partial class EndocrineTreatmentToTreatment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.HasSequence("Diagnoses_seq", "dbo");

            modelBuilder.HasSequence("HealthChecks_seq", "dbo");

            modelBuilder.HasSequence("Treatments_seq", "dbo");

            modelBuilder.Entity("CancerRegistry.Models.Accounts.Doctor.Doctor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiplomaNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EIK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("CancerRegistry.Models.Accounts.Patient.Patient", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ActiveDiagnoseId")
                        .HasColumnType("bigint");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.Diagnose", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("NEXT VALUE FOR dbo.Diagnoses_seq");

                    b.Property<int>("DistantMetastasis")
                        .HasColumnType("int");

                    b.Property<string>("DoctorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PrimaryTumor")
                        .HasColumnType("int");

                    b.Property<int>("RegionalLymphNodes")
                        .HasColumnType("int");

                    b.Property<short>("Stage")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorUserId");

                    b.HasIndex("PatientUserId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.HealthChecks.HealthCheck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("NEXT VALUE FOR dbo.HealthChecks_seq");

                    b.Property<long>("DiagnoseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiagnoseId");

                    b.ToTable("HealthChecks");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.Treatments.Treatment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("NEXT VALUE FOR dbo.Treatments_seq");

                    b.Property<DateTime>("Beginning")
                        .HasColumnType("datetime2");

                    b.Property<int>("Chemeotherapy")
                        .HasColumnType("int");

                    b.Property<long>("DiagnoseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndocrineTreatment")
                        .HasColumnType("int");

                    b.Property<int>("Radiation")
                        .HasColumnType("int");

                    b.Property<int>("Surgery")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnoseId")
                        .IsUnique();

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.Diagnose", b =>
                {
                    b.HasOne("CancerRegistry.Models.Accounts.Doctor.Doctor", "Doctor")
                        .WithMany("Diagnoses")
                        .HasForeignKey("DoctorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CancerRegistry.Models.Accounts.Patient.Patient", "Patient")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PatientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.HealthChecks.HealthCheck", b =>
                {
                    b.HasOne("CancerRegistry.Models.Diagnoses.Diagnose", "Diagnose")
                        .WithMany("HealthChecks")
                        .HasForeignKey("DiagnoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnose");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.Treatments.Treatment", b =>
                {
                    b.HasOne("CancerRegistry.Models.Diagnoses.Diagnose", "Diagnose")
                        .WithOne("Treatment")
                        .HasForeignKey("CancerRegistry.Models.Diagnoses.Treatments.Treatment", "DiagnoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnose");
                });

            modelBuilder.Entity("CancerRegistry.Models.Accounts.Doctor.Doctor", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("CancerRegistry.Models.Accounts.Patient.Patient", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("CancerRegistry.Models.Diagnoses.Diagnose", b =>
                {
                    b.Navigation("HealthChecks");

                    b.Navigation("Treatment");
                });
#pragma warning restore 612, 618
        }
    }
}
